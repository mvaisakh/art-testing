Below lists all files which are for profiling automation.

perf
├── analyze.sh                         # Script to analyze the perf data captured by record-events.sh.
├── build-wrapper.sh                   # Script to build java micro benchmark.
├── common.sh                          # Common definitions and script utilities.
├── config                             # Configuration files.
│   ├── commands.sh                    # Additional commands need to be profiled.
│   ├── events-generic.js              # Generic perf events definition. Used by JS files.
│   ├── events-pmu.js                  # PMU events definition. Used by JS files.
│   ├── events.sh                      # Define events which should be captured by record-events.sh.
│   ├── max_hotspots.sh                # Define max number of hotspots which should be annotated.
│   └── print_event_ids.sh             # Helper script which gathers the events defined in js files.
├── download-flamegraph.sh             # Script to download FrameGraph.
├── html                               # HTML for review the perf outputs.
│   ├── annotation.html
│   ├── annotation.js
│   ├── flamegraph.html
│   ├── flamegraph.js
│   ├── hotspot.html
│   ├── hotspot.js
│   ├── index.html                     # index.html
│   ├── index.js
│   ├── log.html
│   ├── log.js
│   ├── report.html
│   ├── report.js
│   ├── style.css
│   └── utils.js
├── PERF.README                        # This file.
├── perf-report-with-java-sources.sh   # Script to review perf output interactively.
├── profile.sh                         # Script to profile java micro-benchmarks and other commands.
├── record-events.sh                   # Script to capture multple events.
└── record-one.sh                      # Script to capture one events.

Steps to use the automation script:

1. Preparation

1.1 Build and flash your devices.
  Please reference to http://source.android.com/source/building-running.html .

1.2 Setup environment.
  cd <AOSP>
  . build/envsetup.sh
  lunch

1.3 Build and install perf (it's part of <AOSP>)
  m -j 64 perf
  adb root
  adb remount
  adb sync

1.4 Download FlameGraph.
  cd <this_folder>
  ./download-flamegraph.sh

1.5 Copy kernel symbol. (Optional)
  cp <kernel_symbol_file> .             # Named as vmlinux.

2. Generate the profiling data.
2.1 Generate profiling data for java micro benchmarks.
  ./profile.sh
2.2 Generate profiling data for customized commands. For example,
  ./record-events.sh "find /system" perf-out/find
  ./analyze.sh perf-out/find find perf-out/bench_result.js

3. Review output

3.1. Review perf report. (The below script can be also used for native commands.)
  ./perf-report-with-java-sources.sh <perf_data_file>
For example,
  ./perf-report-with-java-sources.sh perf-out/Matrix_dalvikvm/cycles.perf.data

3.2. Review output via browser.

  Try viewing html/index.html locally. If that doesn't work for you:

  3.2.1. Copy tools/perf folder entirely to webserver's html folder. Or make a symbol link in the
html folder to this folder. For example,
    ln -s $(pwd) /var/www/html/java-test

  3.2.2. Open the index.html in the brower from the webserver. The URL might be:
    http://localhost/java-test/html/index.html
    Note: Some pages cannot be viewed locally! XMLHttpRequest has been used to load output data in
javascript. But accessing local data or cross domain is forbidden according to the HTML spec due to
security reason.

